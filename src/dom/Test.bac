# Wyglad akcji:
# typ #id .class : value

div #main-area:
  header:
    p.title : 'Hello world'
    p.desc  : 'Here is some additional info'


header
  h1 .title:
    'Welcome world'

  date:
    '29.08.2011'

  # Problematyczne wyrazenia: "that:" oraz "- have". Dobrze byloby nie musiec ich escape'owac.
  # Moglbym sam samodzielnie takie cos ignorowac bo 'jest string??'
  p .desc:
    "I would like u to know
    \that: I'm greatfull that u all
    \- have come to see me in a such
    short notice! :)"
    
    p:
      span: 'Value'


  p:
    "Hello world
    that: I'm anything
    - I have to come see u!"
  
    p:
      span: 'Value'

footer:
  p:
    return 'Logged' if ..user.status > 0
    return 'Unlogged'
  p:
    ..user.name

div
  p:
    hash =
      \fafa: 'gaga'
      \haha: 'papa'


1. Cudzyslowy:
Cudzyslowy sa wymagane. Wartosc akcji to zawsze CoffeeScript - programista nie musi sie nad tym zastanawiac. Dlugie stringi mozna latwo schowac pod zmienna badz tlumaczeniem badz baza danych.

2. Oznaczenie konca:
Fajnie jest, gdy moge robic custom logic jako wartosc konkretnej akcji. To jest w wielu liniach i tak ma pozostac. Mam chyba prawo oczekiwac wartosci, ze typu "<id>:" nie wystapia w CS tak po prostu. W momencie, gdyby taka wartosc wystapila, uzytkownik powinien wykonac escpae za pomoca '\'. W ten sposob wartosc specjalna NIE wystapi na poczatku linii.

3. Specjalne wyrazenia:
Loop, if, else - dla mnie najlatwiej jesli zostana one poprzedzone '- <expression>', bo w ten sposob moge latwo wykryc co i jak ;) Niestety, taki '-' moge latwo zapisac w CS badz Stringu - czy bym musial go escape'owac czy moge jakos lepiej?

4. Domylsne akcje:
Jesli nie podam niczego to mozna sie latwo pogubic... A gdybym dawal 'pusta' akcje zamiast zadnej? Wtedy musialbym zapodac cos w stylu:

  p .listing
    : 'ItemA'
    : 'ItemB'
    : 'ItemC'


5. Indentation:
Istnieja dwa rozne tryby w ktorych inaczej traktuje wciecia:

  p:
    return 'Logged' if ..user.status > 0
    return 'Unlogged'
  
  click: (ev) ->
    ..user.clicked++
  

W pierwszym przypadku chce otrzymac:
value = ->
  return 'Logged' if ..user.status > 0
  return 'Unlogged'

Natomiast w drugim:
value = -> (ev) ->
  ..user.clicked++

Czyli traktujemy, ze same-line expression dopinamy zaraz za oznaczeniem funkcji, natomiast wszystko co nizej bedzie z dodatkowym indent jako bazowym. Kazdy kolejny relatywnie wzgledem tego poziomu :)
